name: Windows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  SDL_VERSION: prerelease-2.23.1
  OPENCV_VERSION: "4.6.0"
  CATCH_VERSION: "v3.1.0"
  SPDLOG_VERSION: "v1.10.0"
  GENERATOR: "Ninja Multi-Config"

jobs:
  build:
    runs-on: windows-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: ilammy/msvc-dev-cmd@v1

    - name: Cache OpenCV
      uses: actions/cache@v3
      id: cache-opencv
      with:
        path: opencv/install
        key: ${{runner.os}}-opencv-${{env.OPENCV_VERSION}}-static-ninja-${{hashFiles('misc/build/opencv_minimal_flags.txt')}}

    - name: Install OpenCV
      if: steps.cache-opencv.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/opencv/opencv.git --depth 1 --branch $env:OPENCV_VERSION
        cd opencv
        cmake -B build -G "$env:GENERATOR" `
          -DBUILD_SHARED_LIBS=OFF `
          -DCMAKE_INSTALL_PREFIX=install `
          @(Get-Content ../misc/build/opencv_minimal_flags.txt)
        cmake --build build --target install --config Release
        cd ..

    - name: Cache SDL
      uses: actions/cache@v3
      id: cache-sdl
      with:
        path: sdl/install
        key: ${{runner.os}}-sdl-${{env.SDL_VERSION}}-static-ninja

    - name: Install SDL
      if: steps.cache-sdl.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/libsdl-org/SDL.git --depth 1 --branch $env:SDL_VERSION
        cd sdl
        cmake -B build -G "$env:GENERATOR" `
          -DBUILD_SHARED_LIBS=OFF `
          -DCMAKE_INSTALL_PREFIX=install `
          -DSDL_FORCE_STATIC_VCRT=ON
        cmake --build build --target install --config Release
        cd ..

    - name: Cache Catch
      uses: actions/cache@v3
      id: cache-catch
      with:
        path: catch/install
        key: ${{runner.os}}-catch-${{env.CATCH_VERSION}}-static-${{env.BUILD_TYPE}}-ninja

    - name: Install Catch
      if: steps.cache-catch.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/catchorg/Catch2.git catch --depth 1 --branch $env:CATCH_VERSION
        cd catch
        cmake -B build -G "$env:GENERATOR" `
          -DCMAKE_INSTALL_PREFIX=install `
          -DBUILD_TESTING=OFF `
          -DCMAKE_POLICY_DEFAULT_CMP0091=NEW `
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
        cmake --build build --target install --config $env:BUILD_TYPE
        cd ..

    - name: Cache spdlog
      uses: actions/cache@v3
      id: cache-spdlog
      with:
        path: spdlog/build/install
        key: ${{runner.os}}-spdlog-${{env.SPDLOG_VERSION}}-static-${{env.BUILD_TYPE}}-ninja

    - name: Install spdlog
      if: steps.cache-spdlog.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/gabime/spdlog.git --depth 1 --branch $env:SPDLOG_VERSION
        cd spdlog
        cmake -B build -G "$env:GENERATOR" `
          -DCMAKE_INSTALL_PREFIX=build/install `
          -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
        cmake --build build --target install --config $env:BUILD_TYPE
        cd ..

    - name: Configure CMake
      run: |
        cmake -B build -G "$env:GENERATOR" `
          -DBUILD_TESTING=ON `
          -DXPANO_STATIC_VCRT=ON `
          -DCMAKE_INSTALL_PREFIX=install `
          -DSDL2_DIR="sdl/install/cmake" `
          -DOpenCV_STATIC=ON `
          -DOpenCV_DIR="opencv/install" `
          -Dspdlog_DIR="spdlog/build/install/lib/cmake/spdlog" `
          -DCatch2_DIR="../catch/install/lib/cmake/Catch2" `

    - name: Build
      run: cmake --build build --config $env:BUILD_TYPE --target install

    - name: Run Tests
      run: |
        cd build
        ctest -C $env:BUILD_TYPE
