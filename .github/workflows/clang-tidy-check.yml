name: Check clang-tidy

on:
  push:
    branches: [ "main" ]
    paths: 
      - "xpano/**"
      - "tests/**"
      - "misc/cmake/**"
      - "CMakeLists.txt"
      - ".clang-tidy"
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  CATCH_VERSION: "v3.1.0"

jobs:
  clang-tidy-check:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true

    - uses: awalsh128/cache-apt-pkgs-action@v1.1.0
      with:
          packages: libgtk-3-dev libopencv-dev libsdl2-dev libspdlog-dev

    - name: Cache Catch
      uses: actions/cache@v3
      id: cache-catch
      with:
        path: catch/install
        key: ${{runner.os}}-catch-${{env.CATCH_VERSION}}-${{env.BUILD_TYPE}}-22.04

    - name: Install Catch
      if: steps.cache-catch.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/catchorg/Catch2.git catch --depth 1 --branch $CATCH_VERSION
        cd catch
        cmake -B build -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=OFF
        cmake --build build -j $(nproc) --target install
        cd ..

    - name: Cache compilation database
      uses: actions/cache@v3
      id: cache-compile-commands
      with:
        path: build/compile_commands.json
        key: ${{runner.os}}-compile-commands-${{hashFiles('**/CMakeLists.txt', '**/*.cmake')}}-${{env.BUILD_TYPE}}-22.04

    - name: Configure CMake
      if: steps.cache-compile-commands.outputs.cache-hit != 'true'
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_INSTALL_PREFIX=install \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          -DBUILD_TESTING=ON \
          -DCatch2_DIR=../catch/install/lib/cmake/Catch2

    - name: Run clang-tidy
      run: run-clang-tidy xpano tests -p build -quiet
